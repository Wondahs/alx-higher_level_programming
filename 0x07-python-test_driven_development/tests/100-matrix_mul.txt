# Tests for matrix multiplication

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul>>>
>>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
[[7, 10], [15, 22]]
>>> print(matrix_mul([1,2], [[1, 2], [3, 4]]))          Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 14, in matrix_mul
    raise TypeError("m_a must be a list of lists")
TypeError: m_a must be a list of lists
>>> print(matrix_mul([[1,2]], [[1, 2], [3, 4]]))
[[7, 10]]
>>> print(matrix_mul([[1,2]], [[3,4], [5, 6]]))
[[13, 16]]
>>> print(matrix_mul([[1,2]], [[3,4], [5, r]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'r' is not defined
>>> print(matrix_mul([[1,2]], [[3,4], [5, "r"]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 24, in matrix_mul
    raise TypeError("m_b should contain only integers or floats")
TypeError: m_b should contain only integers or floats
>>> print(matrix_mul([[1,None]], [[3,4], [5, 8.7]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 22, in matrix_mul
    raise TypeError("m_a should contain only integers or floats")
TypeError: m_a should contain only integers or floats
>>> print(matrix_mul("a", [[3,4], [5, 8.7]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 10, in matrix_mul
    raise TypeError("m_a must be a list")
TypeError: m_a must be a list
>>> print(matrix_mul([[1,2]], "e"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 12, in matrix_mul
    raise TypeError("m_b must be a list")
TypeError: m_b must be a list
>>> print(matrix_mul([[1,2]], [3,4]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 16, in matrix_mul
    raise TypeError("m_b must be a list of lists")
TypeError: m_b must be a list of lists
>>> print(matrix_mul([8], [[3,4], [5, 8.7]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 14, in matrix_mul
    raise TypeError("m_a must be a list of lists")
TypeError: m_a must be a list of lists
>>> print(matrix_mul([], [[3,4], [5, 8.7]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 18, in matrix_mul
    raise ValueError("m_a can't be empty")
ValueError: m_a can't be empty
>>> print(matrix_mul([[]], [[3,4], [5, 8.7]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 18, in matrix_mul
    raise ValueError("m_a can't be empty")
ValueError: m_a can't be empty
>>> print(matrix_mul([[1,2]], []))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 20, in matrix_mul
    raise ValueError("m_b can't be empty")
ValueError: m_b can't be empty
>>> print(matrix_mul([[1,2]], [[]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 20, in matrix_mul
    raise ValueError("m_b can't be empty")
ValueError: m_b can't be empty
>>> print(matrix_mul([[1,2]], [[3,4], [5, 6]]))
[[13, 16]]
>>> print(matrix_mul([[1,2]], [[3,4], [5, 4, 6]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 28, in matrix_mul
    raise TypeError("each row of m_b must be of the same size")
TypeError: each row of m_b must be of the same size
>>> print(matrix_mul([[1,2, 4]], [[3,4], [5, 6]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 28, in matrix_mul
    raise TypeError("each row of m_b must be of the same size")
TypeError: each row of m_b must be of the same size
>>> print(matrix_mul([[1,2,], [3, 4], [[3,4], [5, 6]]))
  File "<stdin>", line 1
    print(matrix_mul([[1,2,], [3, 4], [[3,4], [5, 6]]))
                                                     ^
SyntaxError: closing parenthesis ')' does not match opening parenthesis '['
>>> print(matrix_mul([[1,2,], [3, 4]], [[3,4], [5, 6]]))[[13, 16], [29, 36]]
>>> print(matrix_mul([[1,2,], [3, 4, 4]], [[3,4], [5, 6]]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 26, in matrix_mul
    raise TypeError("each row of m_a must be of the same size")
TypeError: each row of m_a must be of the same size
>>> print(matrix_mul([[1], [3]], [[3,4], [5, 6]]))      Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 28, in matrix_mul
    raise TypeError("each row of m_b must be of the same size")
